package com.laioffer.twitch.external;

import com.laioffer.twitch.external.model.ClipResponse;
import com.laioffer.twitch.external.model.GameResponse;
import com.laioffer.twitch.external.model.StreamResponse;
import com.laioffer.twitch.external.model.VideoResponse;
import org.springframework.cloud.openfeign.FeignClient;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestParam;

import java.util.List;

/*
This is a Java interface that uses the Spring Cloud OpenFeign library to define a client for making HTTP requests to the Twitch API.

Below methods are just declarations of the HTTP requests that the Feign client will make to interact with the Twitch API. The actual
implementation of these methods is generated by the Feign library at runtime, based on the annotations and parameters provided in the interface.
The responses are expected to be represented by classes like GameResponse, VideoResponse, ClipResponse, and StreamResponse.

如果没有declarative http client的话，每次跟twitch-api要求信息的时候，都要手写header(token,client-id)和error code - 麻烦。
我们这project，application.yml 里面已经specify好twitch resource的 url和账号密码。所以现在可以直接调用不需要declare httpclient。

Spring Cloud OpenFeign是什么？Spring Cloud OpenFeign is a declarative HTTP client library that simplifies the process of making HTTP requests
to external APIs in a Spring Boot application. It is built on top of the Spring Cloud ecosystem and is part of the Spring Cloud Netflix project.
The primary goal of Spring Cloud OpenFeign is to make it easier for developers to communicate with remote services and APIs by providing
 a more intuitive and organized way to define and use RESTful clients.
*/
@FeignClient(name = "twitch-api")   // This annotation is used to define a Feign client interface. Feign is a declarative web service client that simplifies making HTTP requests to external APIs. The name attribute specifies the logical name of the Feign client, this name is created from application.yml configuration section and needs to be consistent with that to pull the info.
public interface TwitchApiClient {

    /*This method is a declaration for making a GET request to the "/games" endpoint of the Twitch API.
    It expects a String parameter named name, which is sent as a query parameter in the request.
    The return type seems to be a class named GameResponse.*/
    @GetMapping("/games")   // These annotations are used to specify the HTTP methods and endpoints for the methods declared in the interface. They correspond to the respective API endpoints provided by the Twitch API.
    GameResponse getGames(@RequestParam("name") String name);

    @GetMapping("/games/top")
    GameResponse getTopGames();

    @GetMapping("/videos/")
    VideoResponse getVideos(@RequestParam("game_id") String gameId, @RequestParam("first") int first);

    @GetMapping("/clips/")
    ClipResponse getClips(@RequestParam("game_id") String gameId, @RequestParam("first") int first);

    /* This method is a declaration for making a GET request to the "/streams/" endpoint of the Twitch API.
    It expects a List<String> parameter named gameIds, sent as a query parameter named "game_id," and an int parameter
    named first, sent as a query parameter named "first." The return type is probably StreamResponse.*/
    @GetMapping("/streams/")
    StreamResponse getStreams(@RequestParam("game_id") List<String> gameIds, @RequestParam("first") int first);

}
